import base64
from dataclasses import dataclass, field
from typing import Dict, List, Union
from file_generators.base.base_data_factory import BaseDataFactory


def malware_data_factory() -> Dict[str, List[Union[str, bytes]]]:
    """Factory function for malware data."""
    return {
        "macro": [
            b'PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00~8\xecz\x87\x01\x00\x00\xad\x05\x00\x00\x13\x00\x08\x02[Content_Types].xml \xa2\x04\x02(\xa0\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb4\x94\xcfN\xc2@\x10\xc6\xef&\xbeC\xb3W\xd3.x0\xc6P8\x08\x1e\x95D|\x80a;\x85\xd5vw\xb3;\xfc{{\xa7\xb4\x105@U\xf4BRf\xbe\xdf\xf7\xcdv;\xbd\xc1\xba,\xa2%\xfa\xa0\xadIE7\xe9\x88\x08\x8d\xb2\x996\xb3T\xbcL\x1e\xe2[\x11\x05\x02\x93Aa\r\xa6b\x83A\x0c\xfa\x97\x17\xbd\xc9\xc6a\x88XmB*\xe6D\xeeN\xca\xa0\xe6XBH\xacC\xc3\x95\xdc\xfa\x12\x88\x1f\xfdL:Po0Cy\xdd\xe9\xdcHe\r\xa1\xa1\x98*\x86\xe8\xf7\x86\x98\xc3\xa2\xa0h\xb4\xe6\xbf\xeb$SmDt_\xf7UV\xa9\x00\xe7\n\xad\x80\xb8,\x97&K\xca\x10\xdb<\xd7\n\x93\xe5\x14\xc6\xde\xbe\xa2"!\x0f\xc2<\x16\xa1\x85\xf69r\xdc\xc4MX\xb9\xed\ts\xed\xc2\x157\x1cq\xa8*\xc7\r\x1a\xdd\x13\x9f\xb3\xd7\x19Fc\xf0\xf4\x08%w\xc9\x95\xf5\x99\xcc\xacZ\x94\xacLNc\x9a\xa9+I\xb2\x97\x94\xa0\xbc\x1d\x19\x98\x16\xc8U\xd0f\x97\xf2\xa8\x1b\x1f\xd7\x10\x08~`\xd6(Z\xc9\x816\x05\x86o\x80\xbf\x9cv\xfd\x1e\xf7#U,\xe7\xad\xc2\x10\xf8\x1a\x96ERs\xdb\xed\x91\x88\x05\xff\x11\xa0!\xb7FX\xe1\xf4\xf9\xdfR|\x80\xb7\x06\xc9\xd9wR]\x8a\xbf\x8f\xb1G\xb7\x86 ^\x07X\xffv\xcf\xce\xb1\xc5\x9c\xb2\xe4N^\x03.\xf0z\xf1\xbf\x18{\xf7\xc9W\xea\x98\x07v\xe8I\x9f\xbeu{GF\x9f=\x1fV\xdb$\xc3\xec\x80\xb7\xdc.\xdb\xfe;\x00\x00\x00\xff\xff\x03\x00',
        ],
        "generic": [
            "http://www.xvira-malwareavrad.com",
            "http://www.yvirc-malwareavrad.com"
        ],
        "dummy": [
            "[Auto] This is Avanan's Test file which was created automatically!",
        ],
        "eicar": [
            # CRITICAL: This is the EXACT EICAR test string - DO NOT MODIFY
            "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"
        ],
        "malwareavrad": ["https://go.openathens.net/redirector/www.monash.edu?url=https%3A%2F%2Fwww.yvirc.malwareavrad.com"]
    }


@dataclass
class MalwareFactory(BaseDataFactory):
    """Factory for generating malware test data."""

    data: Dict[str, List[Union[str, bytes]]] = field(default_factory=malware_data_factory)

    def get_data(self) -> Dict[str, List[Union[str, bytes]]]:
        """Return malware data dictionary."""
        return self.data
